<?xml version="1.0" encoding="UTF-8"?>
 <!--
* JOSE PABLO CASTRO VALVERDE                                            
* Copyright (C) EDDAP 2012                                             
* josepablo.castro@gmail.com 
* USB Comunication Toolbox                                          
* This file is released under the 3-clause BSD license. See COPYING-BSD.
 -->
<refentry version="5.0-subset Scilab" xml:id="hid_get_feature_report" xml:lang="en"
          xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:ns3="http://www.w3.org/1999/xhtml"
          xmlns:mml="http://www.w3.org/1998/Math/MathML"
          xmlns:db="http://docbook.org/ns/docbook">
  <info>
    <pubdate>$LastChangedDate: 2008-03-26 09:50:39 +0100 (mer., 26 mars 2008)
    $</pubdate>
  </info>

  <refnamediv>
    <refname>hid_get_feature_report</refname>

    <refpurpose>Get a feature report from a HID device.</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <title>Calling Sequence</title>

    <synopsis>[rxBuff,get_feature_success]=hid_get_feature_report(_size);</synopsis>
  </refsynopsisdiv>
  <refsection><title>Parameters</title>
    <variablelist>
      <varlistentry>  
        <term>rxBuff </term>
          <listitem>
          : Buffer to be read or transfer to the USB HID Device. The type of the data in the buffer has to be unsigned integer of 8 bits
       </listitem> 
        </varlistentry>
      <varlistentry>  
        <term>_size</term>
          <listitem>
          : Size of the buffer to be read into the USB HID Device. The type of _size has to be unsigned integer of 8 bits
       </listitem> 
        </varlistentry>
        <varlistentry>  
        <term>get_feature_success </term>
          <listitem>
          : retun 0 if device has been read and -1 if the device can not be read. Check the USB HID device is properly connected to the host computer and properly opened.
          </listitem> 
        </varlistentry>
    </variablelist>
  </refsection>
  <refsection>
    <title>Description</title>

    <para>Get a feature report from a HID device.</para>

    <para>Make sure to set the first byte of data[] to the Report ID of the report to be read.  Make sure to allow space for this extra byte in data[].</para>
  </refsection>

  <refsection>
    <title>Examples</title>

    <programlisting role="example">
    <![CDATA[
      clc
      n=5
      txBuff=init_buff(n)
      for i=1:n
          txBuff=setBuffValue(txBuff,i,i)
      end
      txBuff=setBuffValue(txBuff,1,hex2dec("00"))
      VendorID="04D8";
      ProductID="010B";
      VendorID=uint16(hex2dec(VendorID));
      ProductID=uint16(hex2dec(ProductID));
      init_success=hid_init();
      if ( init_success < 0 ) then
         disp("unable to initialize the HIDAPI Library");
         return
      else
           disp("HIDAPI Library initialized");
      end
      open_success=hid_open(VendorID,ProductID);
      if ( open_success < 0 ) then
           disp("unable to open device");
           return
      else
           disp("Device Open");
      end
      nonblocking_success=hid_set_nonblocking(%t);
      if ( nonblocking_success < 0 ) then
         disp("unable to set nonblocking");
      else
         disp("device have been set nonblocking");
      end
      send_feature_success=hid_send_feature_report(txBuff,uint8(n)) 
      if ( send_feature_success < 0 ) then
         disp("unable to send the feature report");
      else
         disp("feature report sent");
      end
      [rxBuff,get_feature_success]=hid_get_feature_report(uint8(n));
      if ( get_feature_success < 0 ) then
         disp("unable to get the feature report");
      else
         disp("feature report received");
         disp(rxBuff);
      end
      close_success=hid_close();  
      if ( close_success < 0 ) then
         disp("unable to closed device");
      else
         disp("device closed");
      end
      exit_success=hid_exit();
      if ( exit_success < 0 ) then
         disp("unable to free static data associated with HIDAPI Library");
         return
      else
         disp("HIDAPI Library have been freed all of the static data associated");
      end
   ]]>
   </programlisting>
   The result will be the next:
    <programlisting role="example">
    <![CDATA[
      HIDAPI Library initialized   
     Device Open
     device have been set nonblocking
     feature report sent
     feature report received
      0  0  241  0  0
     device closed
     HIDAPI Library have been freed all of the static data associated
    ]]>
   </programlisting>
  </refsection>

  <refsection role="see also">
    <title>See Also</title>
    <simplelist type="inline">
      <member>
        <link linkend="hid_open">hid_open</link>
      </member>
      <member>
        <link linkend="hid_send_feature_report">hid_send_feature_report</link>
      </member>
      <member>
        <link linkend="hid_close">hid_close</link>
      </member>
    </simplelist>
  </refsection>

  <refsection>
    <title>Authors</title>

    <simplelist type="vert">
      <member>Jose Pablo Castro Valverde josepablo.castro@gmail.com</member>
    </simplelist>
  </refsection>
</refentry>
